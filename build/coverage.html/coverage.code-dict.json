{"/home/travis/build/npmtest/node-npmtest-html-pdf/test.js":"/* istanbul instrument in package npmtest_html_pdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html-pdf/lib.npmtest_html_pdf.js":"/* istanbul instrument in package npmtest_html_pdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_html_pdf = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_html_pdf = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-html-pdf/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-html-pdf && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_html_pdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_html_pdf\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_html_pdf.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_html_pdf.rollup.js'] =\n            local.assetsDict['/assets.npmtest_html_pdf.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_html_pdf.__dirname + '/lib.npmtest_html_pdf.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html-pdf/node_modules/html-pdf/lib/index.js":"var PDF = require('./pdf')\n\nmodule.exports = {\n  create: function createPdf (html, options, callback) {\n    if (arguments.length === 1) {\n      return new PDF(html)\n    }\n\n    if (arguments.length === 2 && typeof options !== 'function') {\n      return new PDF(html, options)\n    }\n\n    if (arguments.length === 2) {\n      callback = options\n      options = {}\n    }\n\n    try {\n      var pdf = new PDF(html, options)\n    } catch (err) {\n      return callback(err)\n    }\n\n    pdf.exec(callback)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-html-pdf/node_modules/html-pdf/lib/pdf.js":"var fs = require('fs')\nvar childprocess = require('child_process')\nvar path = require('path')\nvar assert = require('assert')\n\ntry {\n  var phantomjs = require('phantomjs-prebuilt')\n} catch (err) {\n  console.log('html-pdf: Failed to load PhantomJS module.', err)\n}\n\n/*\n* phantomjs version 1.8.1 and later should work.\n*\n* Create a PDF file out of an html string.\n*\n* Regions for the PDF page are:\n*\n* - Page Header  -> document.getElementById('pageHeader')\n* - Page Content -> document.getElementById('pageContent')\n* - Page Footer  -> document.getElementById('pageFooter')\n*\n* When no #pageContent is available, phantomjs will use document.body as pdf content\n*/\nmodule.exports = PDF\nfunction PDF (html, options) {\n  this.html = html\n  this.options = options || {}\n  if (this.options.script) {\n    this.script = path.normalize(this.options.script)\n  } else {\n    this.script = path.join(__dirname, 'scripts', 'pdf_a4_portrait.js')\n  }\n\n  if (this.options.filename) this.options.filename = path.resolve(this.options.filename)\n  if (!this.options.phantomPath) this.options.phantomPath = phantomjs && phantomjs.path\n  this.options.phantomArgs = this.options.phantomArgs || []\n  assert(this.options.phantomPath, \"html-pdf: Failed to load PhantomJS module. You have to set the path to the PhantomJS binary using 'options.phantomPath'\")\n  assert(typeof this.html === 'string' && this.html.length, \"html-pdf: Can't create a pdf without an html string\")\n  this.options.timeout = parseInt(this.options.timeout) || 30000\n}\n\nPDF.prototype.toBuffer = function PdfToBuffer (callback) {\n  this.exec(function execPdfToBuffer (err, res) {\n    if (err) return callback(err)\n    fs.readFile(res.filename, function readCallback (err, buffer) {\n      if (err) return callback(err)\n      fs.unlink(res.filename, function unlinkPdfFile (err) {\n        if (err) return callback(err)\n        callback(null, buffer)\n      })\n    })\n  })\n}\n\nPDF.prototype.toStream = function PdfToStream (callback) {\n  this.exec(function (err, res) {\n    if (err) return callback(err)\n    try {\n      var stream = fs.createReadStream(res.filename)\n    } catch (err) {\n      return callback(err)\n    }\n\n    stream.on('end', function () {\n      fs.unlink(res.filename, function (err) {\n        if (err) console.log('html-pdf:', err)\n      })\n    })\n\n    callback(null, stream)\n  })\n}\n\nPDF.prototype.toFile = function PdfToFile (filename, callback) {\n  assert(arguments.length > 0, 'html-pdf: The method .toFile([filename, ]callback) requires a callback.')\n  if (filename instanceof Function) {\n    callback = filename\n    filename = undefined\n  } else {\n    this.options.filename = path.resolve(filename)\n  }\n  this.exec(callback)\n}\n\nPDF.prototype.exec = function PdfExec (callback) {\n  var callbacked = false\n  var child = childprocess.spawn(this.options.phantomPath, [].concat(this.options.phantomArgs, [this.script]))\n  var stdout = []\n  var stderr = []\n  var timeout = setTimeout(function execTimeout () {\n    child.stdin.end()\n    child.kill()\n    if (!stderr.length) {\n      stderr = [new Buffer('html-pdf: PDF generation timeout. Phantom.js script did not exit.')]\n    }\n  }, this.options.timeout)\n\n  child.stdout.on('data', function (buffer) {\n    return stdout.push(buffer)\n  })\n\n  child.stderr.on('data', function (buffer) {\n    stderr.push(buffer)\n    child.stdin.end()\n    return child.kill()\n  })\n\n  function exit (err, data) {\n    if (callbacked) return\n    callbacked = true\n    clearTimeout(timeout)\n    if (err) return callback(err)\n    return callback(null, data)\n  }\n\n  child.on('error', exit)\n\n  child.on('exit', function (code) {\n    if (code || stderr.length) {\n      var err = new Error(Buffer.concat(stderr).toString() || 'html-pdf: Unknown Error')\n      return exit(err)\n    } else {\n      try {\n        var buff = Buffer.concat(stdout).toString()\n        var data = (buff) != null ? buff.trim() : undefined\n        data = JSON.parse(data)\n      } catch (err) {\n        return exit(err)\n      }\n      return exit(null, data)\n    }\n  })\n\n  var res = JSON.stringify({html: this.html, options: this.options})\n  return child.stdin.write(res + '\\n', 'utf8')\n}\n","/home/travis/build/npmtest/node-npmtest-html-pdf/node_modules/html-pdf/lib/scripts/pdf_a4_portrait.js":"/* global phantom */\nvar system = require('system')\nvar webpage = require('webpage')\n\n// Error handler\nfunction exit (error) {\n  var message\n  if (typeof error === 'string') message = error\n  if (error) system.stderr.write('html-pdf: ' + (message || 'Unknown Error ' + error) + '\\n')\n  phantom.exit(error ? 1 : 0)\n}\n\n// Build stack to print\nfunction buildStack (msg, trace) {\n  var msgStack = [msg]\n  if (trace && trace.length) {\n    msgStack.push('Stack:')\n    trace.forEach(function (t) {\n      msgStack.push('  at ' + t.file || t.sourceURL + ': ' + t.line + ' (in function ' + t.function + ')')\n    })\n  }\n  return msgStack.join('\\n')\n}\n\nphantom.onError = function (msg, trace) {\n  exit(buildStack('Script - ' + msg, trace))\n}\n\n// Load configurations from stdin\nvar json = JSON.parse(system.stdin.readLine())\nif (!json.html || !json.html.trim()) exit('Did not receive any html')\n\nvar options = json.options\nvar page = webpage.create()\n\nif (options.httpHeaders) page.customHeaders = options.httpHeaders\nif (options.viewportSize) page.viewportSize = options.viewportSize\nif (options.zoomFactor) page.zoomFactor = options.zoomFactor\nif (options.base) page.setContent(json.html, options.base)\nelse page.setContent(json.html, null)\n\npage.onError = function (msg, trace) {\n  exit(buildStack('Evaluation - ' + msg, trace))\n}\n\n// Force cleanup after 2 minutes\n// Add 2 seconds to make sure master process triggers kill\n// before to the phantom process\nvar timeout = (options.timeout || 120000) + 2000\nsetTimeout(function () {\n  exit('Force timeout')\n}, timeout)\n\n// Completely load page & end process\n// ----------------------------------\npage.onLoadFinished = function (status) {\n  // The paperSize object must be set at once\n  page.paperSize = definePaperSize(getContent(page), options)\n\n  // Output to parent process\n  var fileOptions = {\n    type: options.type || 'pdf',\n    quality: options.quality || 75\n  }\n\n  var filename = options.filename || (options.directory || '/tmp') + '/html-pdf-' + system.pid + '.' + fileOptions.type\n  page.render(filename, fileOptions)\n  system.stdout.write(JSON.stringify({filename: filename}))\n\n  exit(null)\n}\n\n// Returns a hash of HTML content\n// ------------------------------\nfunction getContent (page) {\n  return page.evaluate(function () {\n    function getElements (doc, wildcard) {\n      var wildcardMatcher = new RegExp(wildcard + '(.*)')\n      var hasElements = false\n      var elements = {}\n      var $elements = document.querySelectorAll(\"[id*='\" + wildcard + \"']\")\n\n      var $elem, match, i\n      var len = $elements.length\n      for (i = 0; i < len; i++) {\n        $elem = $elements[i]\n        match = $elem.attributes.id.value.match(wildcardMatcher)\n        if (match) {\n          hasElements = true\n          elements[match[1]] = $elem.outerHTML\n          $elem.parentNode.removeChild($elem)\n        }\n      }\n\n      if (hasElements) return elements\n    }\n\n    function getElement (doc, id) {\n      var $elem = doc.getElementById(id)\n      if ($elem) {\n        var html = $elem.outerHTML\n        $elem.parentNode.removeChild($elem)\n        return html\n      }\n    }\n\n    var styles = document.querySelectorAll('link,style')\n    styles = Array.prototype.reduce.call(styles, function (string, node) {\n      return string + (node.outerHTML || '')\n    }, '')\n\n    // Wildcard headers e.g. <div id=\"pageHeader-first\"> or <div id=\"pageHeader-0\">\n    var header = getElements(document, 'pageHeader-')\n    var footer = getElements(document, 'pageFooter-')\n\n    // Default header and footer e.g. <div id=\"pageHeader\">\n    var h = getElement(document, 'pageHeader')\n    var f = getElement(document, 'pageFooter')\n\n    if (h) {\n      header = header || {}\n      header.default = h\n    }\n\n    if (f) {\n      footer = footer || {}\n      footer.default = f\n    }\n\n    var body\n    var $body = document.getElementById('pageContent')\n    if ($body) body = $body.outerHTML\n    else body = document.body.outerHTML\n\n    return {\n      styles: styles,\n      header: header,\n      body: body,\n      footer: footer\n    }\n  })\n}\n\n// Creates page section\n// --------------------\nfunction createSection (section, content, options) {\n  options = options[section] || {}\n  var c = content[section] || {}\n  var o = options.contents\n  if (typeof o !== 'object') o = {default: o}\n\n  return {\n    height: options.height,\n    contents: phantom.callback(function (pageNum, numPages) {\n      var html = o[pageNum] || c[pageNum]\n      if (pageNum === 1 && !html) html = o.first || c.first\n      if (pageNum === numPages && !html) html = o.last || c.last\n      return (html || o.default || c.default || '')\n        .replace(/{{page}}/g, pageNum)\n        .replace(/{{pages}}/g, numPages) + content.styles\n    })\n  }\n}\n\n// Creates paper with specified options\n// ------------------------------------\nfunction definePaperOrientation (options) {\n  var paper = {border: options.border || '0'}\n\n  if (options.height && options.width) {\n    paper.width = options.width\n    paper.height = options.height\n  } else {\n    paper.format = options.format || 'A4'\n    paper.orientation = options.orientation || 'portrait'\n  }\n\n  return paper\n}\n\n// Creates paper with generated footer & header\n// --------------------------------------------\nfunction definePaperSize (content, options) {\n  var paper = definePaperOrientation(options)\n\n  if (options.header || content.header) {\n    paper.header = createSection('header', content, options)\n  }\n\n  if (options.footer || content.footer) {\n    paper.footer = createSection('footer', content, options)\n  }\n\n  if (paper.header && paper.header.height === undefined) paper.header.height = '46mm'\n  if (paper.footer && paper.footer.height === undefined) paper.footer.height = '28mm'\n\n  return paper\n}\n"}